import { ButtonProps } from "@codegouvfr/react-dsfr/Button";
import { sumObjectValues, typedObjectEntries } from "shared";

import { UrbanProjectCreationStep } from "@/features/create-project/core/urban-project/urbanProjectSteps";
import { ProjectFeatures } from "@/features/projects/domain/projects.types";
import {
  formatNumberFr,
  formatPercentage,
  formatSurfaceArea,
} from "@/shared/core/format-number/formatNumber";
import { computePercentage } from "@/shared/core/percentage/percentage";
import { getLabelForUrbanProjectSpace } from "@/shared/core/urbanProject";
import DataLine from "@/shared/views/components/FeaturesList/FeaturesListDataLine";
import Section from "@/shared/views/components/FeaturesList/FeaturesListSection";

import {
  getLabelForUrbanProjectCategory,
  getUrbanProjectCategoryFromFeatures,
} from "../../shared/urbanProjectCategory";
import SoilsDistribution from "./SoilsDistribution";
import UrbanProjectBuildingsSection from "./UrbanProjectBuildingsSection";

type Props = ProjectFeatures & {
  getSectionButtonProps?: (stepId: UrbanProjectCreationStep) => ButtonProps | undefined;
};

const DevelopmentPlanFeatures = ({
  developmentPlan,
  decontaminatedSoilSurface,
  soilsDistribution,
  isExpress,
  getSectionButtonProps,
}: Props) => {
  switch (developmentPlan.type) {
    case "PHOTOVOLTAIC_POWER_PLANT":
      return (
        <>
          <Section title="‚öôÔ∏è Param√®tres du projet">
            <DataLine
              label={<strong>Puissance d'installation</strong>}
              value={`${formatNumberFr(developmentPlan.electricalPowerKWc)} kWc`}
            />
            <DataLine
              label={<strong>Superficie occup√©e par les panneaux</strong>}
              value={formatSurfaceArea(developmentPlan.surfaceArea)}
            />
            <DataLine
              label={<strong>Production annuelle attendue</strong>}
              value={`${formatNumberFr(developmentPlan.expectedAnnualProduction)} MWh / an`}
            />
            <DataLine
              label={<strong>Dur√©e du contrat de revente d'√©nergie</strong>}
              value={`${formatNumberFr(developmentPlan.contractDuration)} ans`}
            />
          </Section>
          <Section title="üåæ Transformation des sols">
            {decontaminatedSoilSurface ? (
              <DataLine
                label="Surface d√©pollu√©e"
                value={formatSurfaceArea(decontaminatedSoilSurface)}
              />
            ) : null}
            <SoilsDistribution
              isExpressProject={isExpress}
              projectType="PHOTOVOLTAIC_POWER_PLANT"
              soilsDistribution={soilsDistribution}
            />
          </Section>
        </>
      );
    case "URBAN_PROJECT": {
      const { spacesDistribution, buildingsFloorAreaDistribution } = developmentPlan;

      const livingAndActivitiesSpaces = {
        BUILDINGS_FOOTPRINT: spacesDistribution.BUILDINGS_FOOTPRINT ?? 0,
        PRIVATE_GARDEN_AND_GRASS_ALLEYS: spacesDistribution.PRIVATE_GARDEN_AND_GRASS_ALLEYS ?? 0,
        PRIVATE_PAVED_ALLEY_OR_PARKING_LOT:
          spacesDistribution.PRIVATE_PAVED_ALLEY_OR_PARKING_LOT ?? 0,
        PRIVATE_GRAVEL_ALLEY_OR_PARKING_LOT:
          spacesDistribution.PRIVATE_GRAVEL_ALLEY_OR_PARKING_LOT ?? 0,
      };
      const greenPublicSpaces = {
        PUBLIC_GREEN_SPACES: spacesDistribution.PUBLIC_GREEN_SPACES ?? 0,
        PUBLIC_GRASS_ROAD_OR_SQUARES_OR_SIDEWALKS:
          spacesDistribution.PUBLIC_GRASS_ROAD_OR_SQUARES_OR_SIDEWALKS ?? 0,
      };

      const publicSpaces = {
        PUBLIC_PAVED_ROAD_OR_SQUARES_OR_SIDEWALKS:
          spacesDistribution.PUBLIC_PAVED_ROAD_OR_SQUARES_OR_SIDEWALKS ?? 0,
        PUBLIC_GRAVEL_ROAD_OR_SQUARES_OR_SIDEWALKS:
          spacesDistribution.PUBLIC_GRAVEL_ROAD_OR_SQUARES_OR_SIDEWALKS ?? 0,
        PUBLIC_PARKING_LOT: spacesDistribution.PUBLIC_PARKING_LOT ?? 0,
      };

      const totalLivingAndActivitiesSpaces = sumObjectValues(livingAndActivitiesSpaces);
      const totalGreenPublicSpaces = sumObjectValues(greenPublicSpaces);
      const totalPublicSpaces = sumObjectValues(publicSpaces);

      const totalSurfaceArea = sumObjectValues(soilsDistribution);

      const urbanProjectCategory = getUrbanProjectCategoryFromFeatures({
        buildingsUseDistribution: buildingsFloorAreaDistribution,
        spacesDistribution,
      });

      const urbanProjectCategoryLabel = getLabelForUrbanProjectCategory(urbanProjectCategory);

      return (
        <>
          <Section
            title="üèò Espaces"
            buttonProps={
              getSectionButtonProps
                ? getSectionButtonProps("URBAN_PROJECT_SPACES_CATEGORIES_INTRODUCTION")
                : undefined
            }
          >
            <DataLine
              label={<strong>Superficie du site</strong>}
              value={
                <strong>
                  {formatSurfaceArea(sumObjectValues(developmentPlan.spacesDistribution))}
                </strong>
              }
            />
            {totalLivingAndActivitiesSpaces > 0 && (
              <DataLine
                label="Lieux d'habitation et d‚Äôactivit√©"
                labelTooltip="Les lieux d'habitation et d‚Äôactivit√© regroupent les lots d√©di√©s aux logements, aux activit√©s √©conomiques, les emprises des √©quipements publics, en dehors des espaces verts publics et autres espaces publics de type rues, places, parking‚Ä¶"
                value={formatSurfaceArea(totalLivingAndActivitiesSpaces)}
                valueTooltip={
                  isExpress
                    ? `On consid√®re que les lieux d'habitation et d‚Äôactivit√© occupent ${formatPercentage(computePercentage(totalLivingAndActivitiesSpaces, totalSurfaceArea))} de la surface du site ; fonction du type de projet ¬´ ${urbanProjectCategoryLabel} ¬ª. Cette valeur est issue du retour d‚Äôexp√©rience ADEME.`
                    : undefined
                }
              />
            )}
            {totalPublicSpaces > 0 && (
              <DataLine
                label="Espaces publics"
                value={formatSurfaceArea(totalPublicSpaces)}
                valueTooltip={
                  isExpress
                    ? `On consid√®re que les espaces publics occupent ${formatPercentage(computePercentage(totalPublicSpaces, totalSurfaceArea))} de la surface du site ; fonction du type de projet ¬´ ${urbanProjectCategoryLabel} ¬ª. Cette valeur est issue du retour d‚Äôexp√©rience ADEME.`
                    : undefined
                }
              />
            )}
            {totalGreenPublicSpaces > 0 && (
              <DataLine
                label="Espaces verts publics"
                labelTooltip="Il s‚Äôagit des espaces verts publics (parcs, jardins, for√™t urbaines, alignements d‚Äôarbres, noues, etc.)."
                valueTooltip={
                  isExpress
                    ? `On consid√®re que les espaces verts occupent ${formatPercentage(computePercentage(totalGreenPublicSpaces, totalSurfaceArea))} de la surface du site ; fonction du type de projet ¬´ ${urbanProjectCategoryLabel} ¬ª. Cette valeur est issue du retour d‚Äôexp√©rience ADEME.`
                    : undefined
                }
                value={formatSurfaceArea(totalGreenPublicSpaces)}
              />
            )}
          </Section>
          {decontaminatedSoilSurface ? (
            <Section
              buttonProps={
                getSectionButtonProps
                  ? getSectionButtonProps("URBAN_PROJECT_SOILS_DECONTAMINATION_INTRODUCTION")
                  : undefined
              }
              title="‚ú® D√©pollution"
              tooltip="Les sols de la friche n√©cessitent une d√©pollution pour permettre la r√©alisation du projet. La pollution √† l‚Äôamiante des b√¢timents n‚Äôest pas consid√©r√©e ici."
            >
              {decontaminatedSoilSurface ? (
                <DataLine
                  label="Surface d√©pollu√©e"
                  value={formatSurfaceArea(decontaminatedSoilSurface)}
                  valueTooltip={
                    isExpress
                      ? `B√©n√©friches consid√®re que 75% de la surface pollu√©e est d√©pollu√©e. Cette valeur est issue du retour d‚Äôexp√©rience ADEME.`
                      : undefined
                  }
                />
              ) : null}
            </Section>
          ) : undefined}

          <Section
            title="üåæ Am√©nagement des espaces"
            buttonProps={
              getSectionButtonProps
                ? getSectionButtonProps("URBAN_PROJECT_SPACES_DEVELOPMENT_PLAN_INTRODUCTION")
                : undefined
            }
          >
            {totalLivingAndActivitiesSpaces > 0 && (
              <>
                <DataLine
                  noBorder
                  label={<strong>Lieux d‚Äôhabitation et d‚Äôactivit√©</strong>}
                  value={<strong>{formatSurfaceArea(totalLivingAndActivitiesSpaces)}</strong>}
                />
                {typedObjectEntries(livingAndActivitiesSpaces)
                  .filter(([, surfaceArea]) => surfaceArea)
                  .map(([space, surfaceArea]) => {
                    return (
                      <DataLine
                        label={getLabelForUrbanProjectSpace(space)}
                        value={formatSurfaceArea(surfaceArea)}
                        key={space}
                        isDetails
                        valueTooltip={
                          isExpress
                            ? `On consid√®re que ${(() => {
                                switch (space) {
                                  case "BUILDINGS_FOOTPRINT":
                                    return "l'emprise au sol b√¢ti";
                                  case "PRIVATE_GARDEN_AND_GRASS_ALLEYS":
                                    return "les jardins et all√©es enherb√©es priv√©es";
                                  case "PRIVATE_GRAVEL_ALLEY_OR_PARKING_LOT":
                                    return "les all√©es ou parkings priv√©s en gravier ";
                                  case "PRIVATE_PAVED_ALLEY_OR_PARKING_LOT":
                                    return "les all√©es ou parkings priv√©s bitum√©s";
                                }
                              })()} occupent ${formatPercentage(computePercentage(surfaceArea, totalSurfaceArea))} de la surface du site des lieux d‚Äôhabitation et d‚Äôactivit√© ; fonction du type de projet ¬´ ${urbanProjectCategoryLabel} ¬ª. Cette valeur est issue du retour d‚Äôexp√©rience ADEME.`
                            : undefined
                        }
                      />
                    );
                  })}
              </>
            )}
            {totalGreenPublicSpaces > 0 && (
              <>
                <DataLine
                  className="pt-2"
                  noBorder
                  label={<strong>Espaces verts publics</strong>}
                  value={<strong>{formatSurfaceArea(totalGreenPublicSpaces)}</strong>}
                />
                {typedObjectEntries(greenPublicSpaces)
                  .filter(([, surfaceArea]) => surfaceArea)
                  .map(([space, surfaceArea]) => {
                    return (
                      <DataLine
                        label={getLabelForUrbanProjectSpace(space)}
                        value={formatSurfaceArea(surfaceArea)}
                        key={space}
                        isDetails
                        valueTooltip={
                          isExpress
                            ? `On consid√®re que ${(() => {
                                switch (space) {
                                  case "PUBLIC_GRASS_ROAD_OR_SQUARES_OR_SIDEWALKS":
                                    return "les espaces verts publics";
                                  case "PUBLIC_GREEN_SPACES":
                                    return "les jardins et all√©es enherb√©es publics";
                                }
                              })()} occupent ${formatPercentage(computePercentage(surfaceArea, totalSurfaceArea))} de la surface du site des lieux d‚Äôhabitation et d‚Äôactivit√© ; fonction du type de projet ¬´ ${urbanProjectCategoryLabel} ¬ª. Cette valeur est issue du retour d‚Äôexp√©rience ADEME.`
                            : undefined
                        }
                      />
                    );
                  })}
              </>
            )}
            {totalPublicSpaces > 0 && (
              <>
                <DataLine
                  className="pt-2"
                  noBorder
                  label={<strong>Espaces publics</strong>}
                  labelTooltip="Les espaces publics sont comptabilis√©s hors espaces verts."
                  value={<strong>{formatSurfaceArea(totalPublicSpaces)}</strong>}
                />
                {typedObjectEntries(publicSpaces)
                  .filter(([, surfaceArea]) => surfaceArea)
                  .map(([space, surfaceArea]) => {
                    return (
                      <DataLine
                        label={getLabelForUrbanProjectSpace(space)}
                        value={formatSurfaceArea(surfaceArea)}
                        key={space}
                        isDetails
                        valueTooltip={
                          isExpress
                            ? `On consid√®re que ${(() => {
                                switch (space) {
                                  case "PUBLIC_GRAVEL_ROAD_OR_SQUARES_OR_SIDEWALKS":
                                    return "les voies, places, trottoirs en gravier";
                                  case "PUBLIC_PARKING_LOT":
                                    return "les parkings";
                                  case "PUBLIC_PAVED_ROAD_OR_SQUARES_OR_SIDEWALKS":
                                    return "les voies, places, trottoirs bitum√©s ";
                                }
                              })()} occupent ${formatPercentage(computePercentage(surfaceArea, totalSurfaceArea))} de la surface du site des lieux d‚Äôhabitation et d‚Äôactivit√© ; fonction du type de projet ¬´ ${urbanProjectCategoryLabel} ¬ª. Cette valeur est issue du retour d‚Äôexp√©rience ADEME.`
                            : undefined
                        }
                      />
                    );
                  })}
              </>
            )}

            <h4 className="text-base pb-2 pt-4 mb-0">R√©partition des sols</h4>

            <SoilsDistribution
              isExpressProject={isExpress}
              projectType="URBAN_PROJECT"
              soilsDistribution={soilsDistribution}
            />
          </Section>

          {livingAndActivitiesSpaces.BUILDINGS_FOOTPRINT > 0 && (
            <UrbanProjectBuildingsSection
              buttonProps={
                getSectionButtonProps
                  ? getSectionButtonProps("URBAN_PROJECT_BUILDINGS_INTRODUCTION")
                  : undefined
              }
              isExpress={isExpress}
              totalSurfaceArea={totalSurfaceArea}
              buildingsFloorAreaDistribution={buildingsFloorAreaDistribution}
              urbanProjectCategoryLabel={urbanProjectCategoryLabel}
            />
          )}
        </>
      );
    }
  }
};

export default DevelopmentPlanFeatures;
