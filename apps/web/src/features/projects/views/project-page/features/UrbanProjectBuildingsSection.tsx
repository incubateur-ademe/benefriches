import { ButtonProps } from "@codegouvfr/react-dsfr/Button";
import { sumObjectValues, typedObjectEntries } from "shared";

import { UrbanProjectFeatures } from "@/features/projects/domain/projects.types";
import { formatPercentage, formatSurfaceArea } from "@/shared/core/format-number/formatNumber";
import { computePercentage } from "@/shared/core/percentage/percentage";
import { getLabelForBuildingsUse } from "@/shared/core/urbanProject";
import DataLine from "@/shared/views/components/FeaturesList/FeaturesListDataLine";
import Section from "@/shared/views/components/FeaturesList/FeaturesListSection";
import InfoTooltip from "@/shared/views/components/InfoTooltip/InfoTooltip";

type Props = {
  buildingsFloorArea: UrbanProjectFeatures["buildingsFloorArea"];
  isExpress: boolean;
  totalSurfaceArea: number;
  urbanProjectCategoryLabel: string;
  buttonProps?: ButtonProps;
};

const UrbanProjectBuildingsSection = ({
  buildingsFloorArea,
  isExpress,
  totalSurfaceArea,
  urbanProjectCategoryLabel,
  buttonProps,
}: Props) => {
  const totalBuildingsSurfaceArea = sumObjectValues(buildingsFloorArea);
  return (
    <Section
      buttonProps={buttonProps}
      title="üè¢ B√¢timents"
      tooltip={
        isExpress
          ? "R√©partition repr√©sentative de l‚Äôam√©nagement des espaces pour ce type de projet urbain. L‚Äôoccupation des sols conditionne la capacit√© d‚Äôinfiltration des eaux, la capacit√© de stockage de carbone dans les sols, etc."
          : undefined
      }
    >
      <DataLine
        noBorder
        label={<strong>Surface de plancher des b√¢timents</strong>}
        value={formatSurfaceArea(totalBuildingsSurfaceArea)}
        valueTooltip={
          isExpress
            ? `On consid√®re que la surface de plancher des b√¢timents est de ${formatPercentage(computePercentage(totalBuildingsSurfaceArea, totalSurfaceArea))} de la surface du site des lieux d‚Äôhabitation et d‚Äôactivit√© ; fonction du type de projet ¬´ ${urbanProjectCategoryLabel} ¬ª. Cette valeur est issue du retour d‚Äôexp√©rience ADEME.`
            : undefined
        }
      />
      <h4 className="text-base pb-2 pt-4 mb-0">
        Usage des b√¢timents{" "}
        <InfoTooltip title="L‚Äôusage des b√¢timents correspond √† leur destination (logements, services de proximit√©, bureaux, √©quipements publics, etc.)" />
      </h4>
      {typedObjectEntries(buildingsFloorArea).map(([use, value]) =>
        value ? (
          <DataLine
            key={use}
            label={getLabelForBuildingsUse(use)}
            value={formatSurfaceArea(value)}
            isDetails
            valueTooltip={
              isExpress
                ? `On consid√®re que ${(() => {
                    switch (use) {
                      case "RESIDENTIAL":
                        return "les logements ";
                      case "LOCAL_STORE":
                        return "les commerces de proximit√©";
                      case "OFFICES":
                        return "les bureaux";
                      case "LOCAL_SERVICES":
                        return "les services de proximit√©";
                      case "ARTISANAL_OR_INDUSTRIAL_OR_SHIPPING_PREMISES":
                        return "les locaux industriels, artisanaux ou logistiques";
                      case "PUBLIC_FACILITIES":
                        return "les √©quipements publics";
                      case "CULTURAL_PLACE":
                        return "les lieux culturels";
                      case "SPORTS_FACILITIES":
                        return "les √©quipements sportifs";
                      case "MULTI_STORY_PARKING":
                        return "les parkings silo";
                      case "OTHER":
                        return "les autres types de b√¢timents";
                    }
                  })()} occupent ${computePercentage(value, totalSurfaceArea)}} de la surface du site des lieux d‚Äôhabitation et d‚Äôactivit√© ; fonction du type de projet ¬´ ${urbanProjectCategoryLabel} ¬ª. Cette valeur est issue du retour d‚Äôexp√©rience ADEME.`
                : undefined
            }
          />
        ) : undefined,
      )}
    </Section>
  );
};

export default UrbanProjectBuildingsSection;
