import Tooltip from "@codegouvfr/react-dsfr/Tooltip";
import React, { ReactNode } from "react";
import { useForm } from "react-hook-form";
import { SiteNature, SiteYearlyExpensePurpose, typedObjectEntries } from "shared";

import {
  getLabelForExpensePurpose,
  SiteManagementYearlyExpensesConfig,
  FricheSecurityYearlyExpensesConfig,
} from "@/features/create-site/core/expenses.functions";
import BackNextButtonsGroup from "@/shared/views/components/BackNextButtons/BackNextButtons";
import RadioButtons from "@/shared/views/components/RadioButtons/RadioButtons";
import RowDecimalsNumericInput from "@/shared/views/components/form/NumericInput/RowDecimalsNumericInput";
import { optionalNumericFieldRegisterOptions } from "@/shared/views/components/form/NumericInput/registerOptions";
import WizardFormLayout from "@/shared/views/layout/WizardFormLayout/WizardFormLayout";

import SiteYearlyExpensesFormInstructions from "./SiteYearlyExpensesFormInstructions";

type YearlyExpenseBearer = "owner" | "tenant";
type FormExpense =
  | { amount?: undefined; bearer?: undefined }
  | { amount: number; bearer?: YearlyExpenseBearer };
export type FormValues = Partial<Record<SiteYearlyExpensePurpose, FormExpense>>;

type Props = {
  hasTenant: boolean;
  siteNature: SiteNature;
  siteManagementYearlyExpensesConfig: SiteManagementYearlyExpensesConfig;
  siteSecurityExpensesConfig: FricheSecurityYearlyExpensesConfig;
  initialValues: FormValues;
  onSubmit: (data: FormValues) => void;
  onBack: () => void;
};

const getLabelForExpense = (purpose: SiteYearlyExpensePurpose): NonNullable<ReactNode> => {
  switch (purpose) {
    case "propertyTaxes":
    case "operationsTaxes":
    case "taxes":
    case "rent":
    case "accidentsCost":
    case "otherOperationsCosts":
      return getLabelForExpensePurpose(purpose);
    case "maintenance":
      return (
        <>
          {getLabelForExpensePurpose("maintenance")}
          <Tooltip
            kind="click"
            title="L‚Äôentretien peut consister en la tonte d‚Äôespaces verts ou la taille de haies, la r√©paration d‚Äôactes de vandalisme ou parfois le maintien hors gel de b√¢timents. Sauf en cas de d√©faillance de l'exploitant (faillite, liquidation judiciaire, etc.) les
      d√©penses d'entretien sont √† la charge de ce dernier."
            id="maintenance-expenses-info"
          />
        </>
      );
    case "otherManagementCosts":
      return (
        <>
          {getLabelForExpensePurpose("otherManagementCosts")}
          <Tooltip
            kind="click"
            title="Par exemple, le maintien de b√¢timents en bon √©tat (ex&nbsp;: chauffage pour √©viter le gel
          de canalisation ou la d√©gradation li√©e l'humidit√©), la taille de la v√©g√©tation ou encore
          le r√®glement des factures d'eau ou d'√©lectricit√©."
            id="other-management-expenses-info"
          />
        </>
      );
    case "security":
      return (
        <>
          {getLabelForExpensePurpose("security")}
          <Tooltip
            kind="click"
            title="Sauf en cas de d√©faillance de l'exploitant (faillite, liquidation judiciaire, etc.) les
      d√©penses de gardiennage sont √† la charge de ce dernier."
            id="security-expenses-info"
          />
        </>
      );
    case "illegalDumpingCost":
      return (
        <>
          {getLabelForExpensePurpose("illegalDumpingCost")}
          <Tooltip
            kind="click"
            title={
              <span>
                L'enqu√™te men√©e en 2019 par l'ADEME indique un ratio moyen de 4,7 kg/hab/an et un
                co√ªt moyen de 900 ‚Ç¨/tonne (Nb&nbsp;: bien qu'on rel√®ve une occurrence non
                n√©gligeable de d√©penses plus √©lev√©es (500 √† 1000 ‚Ç¨/tonne voire sup√©rieurs √† 1000
                ‚Ç¨/tonne), qui peuvent √™tre li√©s √† des typologies de d√©chets particuli√®res (d√©chets
                dangereux, encombrants) ou √† des besoins de gestion (√©vacuation ou traitement)
                sp√©cifiques, une majorit√© des valeurs r√©pertori√©es sont comprises entre 100 et 500
                ‚Ç¨/tonne).
                <br />
                <br />
                Sauf en cas de d√©faillance de l'exploitant (faillite, liquidation judiciaire, etc.)
                les d√©penses de d'enl√®vement de d√©chets sont √† la charge de ce dernier.
              </span>
            }
            id="illegal-dumping-expenses-info"
          />
        </>
      );
    case "otherSecuringCosts":
      return (
        <>
          {getLabelForExpensePurpose("otherSecuringCosts")}
          <Tooltip
            kind="click"
            title="La s√©curisation peut aussi passer, par exemple, par la mise en place de portail, cl√¥ture
            ou de cadenas, voire de protections sur les parties vitr√©es."
            id="other-security-expenses-info"
          />
        </>
      );
  }
};

const getBearerLabel = (bearer: "tenant" | "owner", siteNature: SiteNature) => {
  if (bearer === "owner") {
    return "√Ä la charge du propri√©taire";
  }
  return siteNature === "FRICHE" ? "√Ä la charge du locataire" : "√Ä la charge de l'exploitant";
};

const getTitle = (siteNature: SiteNature): string => {
  const baseTitle = `üí∏ D√©penses annuelles li√©es`;
  switch (siteNature) {
    case "FRICHE":
      return `${baseTitle} √† la friche`;
    case "AGRICULTURAL_OPERATION":
      return `${baseTitle} √† l'exploitation`;
    case "NATURAL_AREA":
      return `${baseTitle} √† l'espace naturel`;
  }
};

export default function SiteYearlyExpensesForm({
  onSubmit,
  onBack,
  siteManagementYearlyExpensesConfig,
  siteSecurityExpensesConfig,
  hasTenant,
  siteNature,
  initialValues,
}: Props) {
  const { handleSubmit, watch, register, formState } = useForm<FormValues>({
    shouldUnregister: true,
    defaultValues: initialValues,
  });

  const expenseBearerOptions = [
    {
      label: getBearerLabel("tenant", siteNature),
      value: "tenant",
    },
    { label: getBearerLabel("owner", siteNature), value: "owner" },
  ];

  const title = getTitle(siteNature);

  const formValues = watch();

  const hasNoValuesFilled =
    typedObjectEntries(formValues).filter(([, value]) => typeof value?.amount === "number")
      .length === 0;

  return (
    <WizardFormLayout title={title} instructions={<SiteYearlyExpensesFormInstructions />}>
      <form onSubmit={handleSubmit(onSubmit)}>
        {siteSecurityExpensesConfig.length > 0 && (
          <h3 className="!tw-mb-0">
            {siteNature === "AGRICULTURAL_OPERATION" ? "Exploitation du site" : "Gestion du site"}
          </h3>
        )}

        {siteManagementYearlyExpensesConfig.map(({ purpose, fixedBearer }) => {
          const amountEntered = !!formValues[purpose]?.amount;
          const askForBearer = fixedBearer === null && amountEntered;
          const bearerError = formState.errors[purpose]?.bearer;
          return (
            <React.Fragment key={purpose}>
              <RowDecimalsNumericInput
                hintText={
                  fixedBearer && hasTenant ? getBearerLabel(fixedBearer, siteNature) : undefined
                }
                addonText="‚Ç¨ / an"
                label={getLabelForExpense(purpose)}
                nativeInputProps={register(
                  `${purpose}.amount`,
                  optionalNumericFieldRegisterOptions,
                )}
              />

              {askForBearer && (
                <RadioButtons
                  error={bearerError}
                  {...register(`${purpose}.bearer`, {
                    required: "Cette information est obligatoire.",
                  })}
                  options={expenseBearerOptions}
                />
              )}
            </React.Fragment>
          );
        })}

        {siteSecurityExpensesConfig.length > 0 && (
          <>
            <h3 className="!tw-mb-0 tw-mt-6">S√©curisation du site</h3>
            {siteSecurityExpensesConfig.map(({ purpose, fixedBearer }) => {
              const amountEntered = !!formValues[purpose]?.amount;
              const askForBearer = fixedBearer === null && amountEntered;
              const amountError = formState.errors[purpose]?.amount;
              const bearerError = formState.errors[purpose]?.bearer;
              return (
                <React.Fragment key={purpose}>
                  <RowDecimalsNumericInput
                    state={amountError ? "error" : "default"}
                    stateRelatedMessage={amountError?.message}
                    nativeInputProps={register(
                      `${purpose}.amount`,
                      optionalNumericFieldRegisterOptions,
                    )}
                    label={getLabelForExpense(purpose)}
                    hintText={
                      hasTenant && fixedBearer ? getBearerLabel(fixedBearer, siteNature) : undefined
                    }
                    addonText="‚Ç¨ / an"
                  />
                  {askForBearer && (
                    <RadioButtons
                      error={bearerError}
                      {...register(`${purpose}.bearer`, {
                        required: "Cette information est obligatoire.",
                      })}
                      options={expenseBearerOptions}
                    />
                  )}
                </React.Fragment>
              );
            })}
          </>
        )}

        <BackNextButtonsGroup
          onBack={onBack}
          nextLabel={hasNoValuesFilled ? "Passer" : "Valider"}
        />
      </form>
    </WizardFormLayout>
  );
}
